{"name":"Serializers","tagline":"","body":"serializers\r\n===========\r\nDjango compatible serializers\r\n\r\nCursorJSON\r\n-----------\r\nSerialize data without model\r\n\r\n\r\n###Registered\r\n```\r\nfrom django.core import serializers\r\nserializers.register_serializer('cursorjson','serializers.cursorjson')\r\n```\r\n\r\n###Uses\r\nExample serialize data from PostGIS\r\n```\r\n...\r\nresponse = HttpResponse(content_type='application/json')\r\ncursor = connections['osm'].cursor()\r\ncursor.execute(\"SELECT id, name, ST_AsGeoJSON(ST_Transform(geom,4326)) AS geom FROM osm\")\r\nserializers.serialize('cursorjson', cursor, json=['geom'], stream=response)\r\n...\r\n```\r\n\r\n###Params\r\njson - list of fields which contains json object\r\n\r\nprimary - name for primary key (default \"id\"). If primary=None returns array of objects. If primary=\"id\" then object {id:object,id:object..}\r\n\r\n\r\n\r\nFeatureCollection\r\n-------------\r\nSerialize geofields from GeoQuerySet, list, tuple..\r\n\r\n###Registered\r\n```\r\nfrom django.core import serializers\r\nserializers.register_serializer('geojson','serializers.featurecollection')\r\n```\r\nor in settings.py:\r\n```\r\nSERIALIZATION_MODULES = { 'geojson' : 'serializers.featurecollection' }\r\n```\r\n\r\n###Uses\r\nExample serialize data from geomodel\r\n```\r\n...\r\nresponse = HttpResponse(content_type='application/json')\r\nserializers.serialize('geojson', City.objects.all(), fields=['point','poly'], stream=response)\r\n...\r\n```\r\n\r\n###Params\r\nfields - list of geometry fields (for serialize geometry only)\r\n\r\ngeometry - geometry field into feature\r\n\r\ngeometry_collection - list of geometry fields (multigeometry for feature)\r\n\r\nproperties - list of fields (properties for feature)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}